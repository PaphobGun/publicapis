{"version":3,"sources":["CategoriesTable.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["columns","title","dataIndex","CategoriesTable","rowKey","dataSource","isLoading","loading","Wrapper","styled","div","InputContainer","App","useSWR","axios","revalidateOnFocus","response","data","error","useState","isOpenErrorModal","setIsOpenErrorModal","searchText","setSearchText","useEffect","handleCloseModal","useMemo","filter","c","toLowerCase","includes","map","index","id","cat","onChange","e","target","value","visible","onCancel","onOk","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAEMA,EAAU,CACd,CACEC,MAAO,WACPC,UAAW,QAeAC,EAXS,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,OAAyC,IAAjCC,kBAAiC,MAApB,GAAoB,EAAhBC,EAAgB,EAAhBA,UAClD,OACE,cAAC,IAAD,CACEF,OAAQA,EACRJ,QAASA,EACTK,WAAYA,EACZE,QAASD,K,mOC8Cf,IAAME,EAAUC,IAAOC,IAAV,KAIPC,EAAiBF,IAAOC,IAAV,KAQLE,EAjEf,WAAgB,IAAD,EACqBC,YAChC,wCACAC,IACA,CACEC,mBAAmB,IAJTC,EADD,EACLC,KAAgBC,EADX,EACWA,MADX,EASmCC,oBAAS,GAT5C,mBASNC,EATM,KASYC,EATZ,OAUuBF,mBAAS,IAVhC,mBAUNG,EAVM,KAUMC,EAVN,KAYbC,qBAAU,WACJN,GACFG,GAAoB,KAErB,CAACH,IAEJ,IAIMO,EAAmB,WACvBJ,GAAoB,IAGhBhB,EAAaqB,mBAAQ,WAAO,IAAD,IAC/B,cAAOV,QAAP,IAAOA,GAAP,UAAOA,EAAUC,YAAjB,iBAAO,EACHU,QAAO,SAACC,GAAD,oBAAOA,QAAP,IAAOA,GAAP,UAAOA,EAAGC,qBAAV,aAAO,EAAkBC,SAAlB,OAA2BR,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAYO,yBADzD,aAAO,EAEHE,KAAI,SAACH,EAAGI,GAAJ,MAAe,CAAEC,GAAID,EAAOE,IAAKN,QACxC,CAACZ,EAAUM,IAEd,OACE,eAACd,EAAD,WACE,cAACG,EAAD,UACE,cAAC,IAAD,CAAOwB,SAjBe,SAACC,GAAO,IAAD,EACjCb,EAAa,OAACa,QAAD,IAACA,GAAD,UAACA,EAAGC,cAAJ,aAAC,EAAWC,QAgBiBA,MAAOhB,MAE/C,cAAC,EAAD,CACElB,OAAO,KACPC,WAAYA,EACZC,WAAYU,IAAaE,IAE3B,cAAC,IAAD,CACEqB,QAASnB,EACToB,SAAUf,EACVgB,KAAMhB,EAHR,6DCtCSiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c03cc521.chunk.js","sourcesContent":["import { Table } from 'antd';\n\nconst columns = [\n  {\n    title: 'Category',\n    dataIndex: 'cat',\n  },\n];\n\nconst CategoriesTable = ({ rowKey, dataSource = [], isLoading }) => {\n  return (\n    <Table\n      rowKey={rowKey}\n      columns={columns}\n      dataSource={dataSource}\n      loading={isLoading}\n    />\n  );\n};\n\nexport default CategoriesTable;\n","import { useMemo, useState, useEffect } from 'react';\nimport { Input, Modal } from 'antd';\nimport styled from 'styled-components';\nimport useSWR from 'swr';\nimport axios from 'axios';\n\nimport CategoriesTable from './CategoriesTable';\n\nfunction App() {\n  const { data: response, error } = useSWR(\n    'https://api.publicapis.org/categories',\n    axios,\n    {\n      revalidateOnFocus: false,\n    }\n  );\n\n  const [isOpenErrorModal, setIsOpenErrorModal] = useState(false);\n  const [searchText, setSearchText] = useState('');\n\n  useEffect(() => {\n    if (error) {\n      setIsOpenErrorModal(true);\n    }\n  }, [error]);\n\n  const handleOnChangeInput = (e) => {\n    setSearchText(e?.target?.value);\n  };\n\n  const handleCloseModal = () => {\n    setIsOpenErrorModal(false);\n  };\n\n  const dataSource = useMemo(() => {\n    return response?.data\n      ?.filter((c) => c?.toLowerCase()?.includes(searchText?.toLowerCase()))\n      ?.map((c, index) => ({ id: index, cat: c }));\n  }, [response, searchText]);\n\n  return (\n    <Wrapper>\n      <InputContainer>\n        <Input onChange={handleOnChangeInput} value={searchText} />\n      </InputContainer>\n      <CategoriesTable\n        rowKey=\"id\"\n        dataSource={dataSource}\n        isLoading={!response && !error}\n      />\n      <Modal\n        visible={isOpenErrorModal}\n        onCancel={handleCloseModal}\n        onOk={handleCloseModal}\n      >\n        API server is down please try again later !\n      </Modal>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  padding: 40px 200px;\n`;\n\nconst InputContainer = styled.div`\n  margin-bottom: 25px;\n\n  input {\n    width: 400px;\n  }\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}